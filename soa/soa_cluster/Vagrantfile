# -*- mode: ruby -*-
# vi: set ft=ruby :
Vagrant.configure("2") do |config|

  config.vm.define :web1 do |web1|
    web1.vm.box = "bento/oracle-7.5"
	web1.vm.hostname = "web1"
	web1.vm.network "private_network", auto_config: false
	
    web1.vm.provision "shell", inline: "sudo cp /vagrant/scripts/yum.conf /etc/"
	
    web1.vm.provision "ansible_local" do |ansible|
		ansible.playbook = "playbook-web.yml"
	end
  end  
  
  config.vm.define :soa1 do |soa1|
    soa1.vm.box = "bento/oracle-7.5"
	soa1.vm.hostname = "soa1"
	soa1.vm.network "private_network", auto_config: false
	
    soa1.vm.provision "shell", inline: "sudo cp /vagrant/scripts/yum.conf /etc/"
	
    soa1.vm.provision "ansible_local" do |ansible|
		ansible.playbook = "playbook-soa-common.yml"
	end

	soa1.vm.provision "ansible_local" do |ansible|
		ansible.playbook = "playbook-soa1.yml"
	end
  end    

  config.vm.define :soa2 do |soa2|
    soa2.vm.box = "bento/oracle-7.5"
	soa2.vm.hostname = "soa2"
	soa2.vm.network "private_network", auto_config: false
	
	soa2.vm.provision "shell", inline: "sudo cp /vagrant/scripts/yum.conf /etc/"
	
    soa2.vm.provision "ansible_local" do |ansible|
		ansible.playbook = "playbook-soa-common.yml"
	end
	
	soa2.vm.provision "ansible_local" do |ansible|
		ansible.playbook = "playbook-soa2.yml"
	end		
  end
  
  config.vm.define :services do |services|
	services.vm.box = "bento/oracle-7.5"
	services.vm.hostname = "srv"
	services.vm.network "private_network", auto_config: false
	
	services.vm.provision "shell", inline: "sudo cp /vagrant/scripts/yum.conf /etc/"	
	
	services.vm.provision "ansible_local" do |ansible|
		ansible.playbook = "playbook-services.yml"
	end
  end  

  config.vm.synced_folder "E:/Download/Oracle/vagrant_installers", "/mnt/installers"
  config.vm.synced_folder "D:/HashiCorp/00-vagrant_vms/my_vagrant_vms/oracle/cache", "/mnt/cache"
  config.vm.network "forwarded_port", guest: 22, host: 2222, id: "ssh", disabled: true

  config.ssh.forward_x11 = true  
  config.ssh.forward_agent = true

  config.vm.provider "vmware_workstation" do |vmware|
    vmware.gui = true
    vmware.vmx["memsize"] = "8192"
    vmware.vmx["numvcpus"] = "2"
	vmware.vmx["cpuid.corespersocket"] = "2"
	vmware.whitelist_verified = true
  end
  
end
